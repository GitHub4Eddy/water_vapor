{"name":"Water Vapor","type":"com.fibaro.multilevelSensor","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_793"},"sections":{"items":[{"components":[{"name":"label1","style":{"weight":"1.2"},"text":"Label","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_793"}}},"uiCallbacks":[],"quickAppVariables":[{"name":"apiKey","value":"1"},{"name":"interval","value":"7200"},{"name":"httpTimeout","value":"5"},{"name":"debugLevel","value":"1"},{"name":"icon","value":"0"},{"name":"latitude","value":"52"},{"name":"longitude","value":"5"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"-- QuickApp WATERVAPOR\n\n-- This QuickApp gives access to real-time water vapor level of any location in Asia, Europe, North America, Australia and New Zealand by latitude and longitude. \n\n\n-- IMPORTANT\n-- You need an API key form https://www.getambee.com\n-- The API is free up to 100 API calls/day, with zero limitations on country, access to air quality, pollen, weather and fire data and dedicated support \n\n\n-- Version 0.3 (24th May 2021)\n-- Changed handling in case exhausted daily usage limit \n\n-- Version 0.2 (21th May 2021)\n-- Tested\n\n-- Version 0.1 (17th May 2021)\n-- Initial version\n\n\n-- Variables (mandatory): \n-- apiKey = Get your free API key from https://www.getambee.com\n-- interval = [number] in seconds time to get the data from the API\n-- timeout = [number] in seconds for http timeout\n-- debugLevel = Number (1=some, 2=few, 3=all, 4=simulation mode) (default = 1)\n-- icon = [numbber] User defined icon number (add the icon via an other device and lookup the number)\n\n-- Example response:\n-- {\"message\":\"success\",\"data\":[{\"createdAt\":\"2021-05-17 11:25:00Z\",\"water_vapor\":1.837}]}\n\n\n-- No editing of this code is needed \n\n\nfunction QuickApp:logging(level,text) -- Logging function for debug\n  if tonumber(debugLevel) >= tonumber(level) then \n      self:debug(text)\n  end\nend\n\n\nfunction QuickApp:updateProperties() --Update properties\n  self:logging(3,\"updateProperties\")\n  self:updateProperty(\"value\",tonumber(data.WaterVapor))\n  self:updateProperty(\"unit\", \"m\")\n  self:updateProperty(\"log\", data.timestamp)\nend\n\n\nfunction QuickApp:updateLabels() -- Update labels\n  self:logging(3,\"updateLabels\")\n  local labelText = \"\"\n  if debugLevel == 4 then\n    labelText = labelText ..\"SIMULATION MODE\" ..\"\\n\\n\"\n  end\n  labelText = labelText ..\"Water Vapor:  \" ..data.WaterVapor ..\" \" ..\"\\n\"\n  labelText = labelText ..\"Message: \" ..data.message ..\"\\n\\n\"\n  labelText = labelText ..\"LAT: \" ..latitude ..\" / \" ..\"LON: \" ..longitude ..\"\\n\"\n  labelText = labelText ..\"Measured: \" ..data.timestamp ..\"\\n\"\n  \n  self:logging(2,\"labelText: \" ..labelText)\n  self:updateView(\"label1\", \"text\", labelText) \nend\n\n\nfunction QuickApp:getValues() -- Get the values\n  self:logging(3,\"getValues\")\n  data.message = jsonTable.message\n  data.WaterVapor = string.format(\"%.1f\",jsonTable.data[1].water_vapor)\n  local createdAt = jsonTable.data[1].createdAt\n\n    -- Check timezone and daylight saving time\n  local timezone = os.difftime(os.time(), os.time(os.date(\"!*t\",os.time())))/3600\n  if os.date(\"*t\").isdst then -- Check daylight saving time \n    timezone = timezone + 1\n  end\n  self:logging(3,\"Timezone + dst: \" ..timezone)\n\n  -- Convert time of measurement to local timezone\n  local pattern = \"(%d+)-(%d+)-(%d+) (%d+):(%d+):(%d+)\"\n  local runyear, runmonth, runday, runhour, runminute, runseconds = createdAt:match(pattern)\n  local convertedTimestamp = os.time({year = runyear, month = runmonth, day = runday, hour = runhour, min = runminute, sec = runseconds})\n  data.timestamp = os.date(\"%d-%m-%Y %X\", convertedTimestamp + (timezone*3600))\nend\n\n\nfunction QuickApp:simData() -- Simulate Ambee API\n  self:logging(3,\"Simulation mode\")\n  local apiResult = '{\"message\":\"success\",\"data\":[{\"createdAt\":\"2021-05-17 11:25:00Z\",\"water_vapor\":1.837}]}'\n  \n  self:logging(3,\"apiResult: \" ..apiResult)\n\n  jsonTable = json.decode(apiResult) -- Decode the json string from api to lua-table \n  \n  self:getValues()\n  self:updateLabels()\n  self:updateProperties()\n\n  for id,child in pairs(self.childDevices) do \n    child:updateValue(data) \n  end\n  \n  self:logging(3,\"SetTimeout \" ..interval ..\" seconds\")\n  fibaro.setTimeout(interval*1000, function() \n     self:simData()\n  end)\nend\n\n\nfunction QuickApp:getData()\n  self:logging(3,\"Start getData\")\n  self:logging(2,\"URL: \" ..address)\n    \n  http:request(address, {\n    options = {data = Method, method = \"GET\", headers = {[\"x-api-key\"] = apiKey,[\"Content-Type\"] = \"application/json\",[\"Accept\"] = \"application/json\",}},\n    \n      success = function(response)\n        self:logging(3,\"response status: \" ..response.status)\n        self:logging(3,\"headers: \" ..response.headers[\"Content-Type\"])\n        self:logging(2,\"Response data: \" ..response.data)\n\n        if response.data == nil or response.data == \"\" or response.data == \"[]\" or response.status > 200 then -- Check for empty result\n          self:warning(\"Temporarily no data from Ambee\")\n          return\n          --self:logging(3,\"No data SetTimeout \" ..interval ..\" seconds\")\n          --fibaro.setTimeout(interval*1000, function() \n          --  self:getdata()\n          --end)\n        end\n\n        --response.data = response.data:gsub(\"% / \", \"\") -- Clean up the response.data by removing /\n        --self:logging(2,\"Response data editted: \" ..response.data)\n\n        jsonTable = json.decode(response.data) -- JSON decode from api to lua-table\n\n        self:getValues()\n        self:updateLabels()\n        self:updateProperties()\n      \n      end,\n      error = function(error)\n        self:error('error: ' ..json.encode(error))\n        self:updateProperty(\"log\", \"error: \" ..json.encode(error))\n      end\n    }) \n\n  self:logging(3,\"SetTimeout \" ..interval ..\" seconds\")\n  fibaro.setTimeout((interval)*1000, function() \n     self:getData()\n  end)\nend\n\n\nfunction QuickApp:createVariables() -- Get all Quickapp Variables or create them\n  data = {}\n  data.message = \"\"\n  data.WaterVapor = \"0\"\n  data.timestamp = \"\"\nend\n\n\nfunction QuickApp:getQuickAppVariables() -- Get all variables \n  apiKey = self:getVariable(\"apiKey\")\n  latitude = tonumber(self:getVariable(\"latitude\"))\n  longitude = tonumber(self:getVariable(\"longitude\"))\n  interval = tonumber(self:getVariable(\"interval\")) \n  httpTimeout = tonumber(self:getVariable(\"httpTimeout\")) \n  debugLevel = tonumber(self:getVariable(\"debugLevel\"))\n  local icon = tonumber(self:getVariable(\"icon\")) \n\n  if apiKey ==\"\" or apiKey == nil then\n    apiKey = \"\" \n    self:setVariable(\"apiKey\",apiKey)\n    self:trace(\"Added QuickApp variable apiKey\")\n  end\n  if latitude == 0 or latitude == nil then \n    latitude = string.format(\"%.2f\",api.get(\"/settings/location\")[\"latitude\"]) -- Default latitude of your HC3\n    self:setVariable(\"latitude\", latitude)\n    self:trace(\"Added QuickApp variable latitude with default value \" ..latitude)\n  end  \n  if longitude == 0 or longitude == nil then\n    longitude = string.format(\"%.2f\",api.get(\"/settings/location\")[\"longitude\"]) -- Default longitude of your HC3\n    self:setVariable(\"longitude\", longitude)\n    self:trace(\"Added QuickApp variable longitude with default value \" ..longitude)\n  end\n  if interval == \"\" or interval == nil then\n    interval = \"7200\" -- Free account includes up to 100 calls a day, so default value is 7200 (every two hours)\n    self:setVariable(\"interval\",interval)\n    self:trace(\"Added QuickApp variable interval\")\n    interval = tonumber(interval)\n  end  \n  if httpTimeout == \"\" or httpTimeout == nil then\n    httpTimeout = \"5\" -- timeoout in seconds\n    self:setVariable(\"httpTimeout\",httpTimeout)\n    self:trace(\"Added QuickApp variable httpTimeout\")\n    httpTimeout = tonumber(httpTimeout)\n  end\n  if debugLevel == \"\" or debugLevel == nil then\n    debugLevel = \"1\" -- Default value for debugLevel response in seconds\n    self:setVariable(\"debugLevel\",debugLevel)\n    self:trace(\"Added QuickApp variable debugLevel\")\n    debugLevel = tonumber(debugLevel)\n  end\n  if icon == \"\" or icon == nil then \n    icon = \"0\" -- Default icon\n    self:setVariable(\"icon\",icon)\n    self:trace(\"Added QuickApp variable icon\")\n    icon = tonumber(icon)\n  end\n  if icon ~= 0 then \n    self:updateProperty(\"deviceIcon\", icon) -- set user defined icon \n  end\n  latitude = string.format(\"%.2f\",latitude) -- double check, to prevent 404 response\n  longitude = string.format(\"%.2f\",longitude) -- double check, to prevent 404 response\n\n  address = \"https://api.ambeedata.com/waterVapor/latest/by-lat-lng\" ..\"?lat=\" ..latitude ..\"&lng=\" ..longitude -- Combine webaddress and location info\n\n  if apiKey == nil or apiKey == \"\"  then -- Check mandatory API key \n    self:error(\"API key is empty! Get your free API key from https://www.getambee.com\")\n    self:warning(\"No API Key: Switched to Simulation Mode\")\n    debugLevel = 4 -- Simulation mode due to empty API key\n  end\n\nend\n\n\nfunction QuickApp:onInit()\n  __TAG = fibaro.getName(plugin.mainDeviceId) ..\" ID:\" ..plugin.mainDeviceId\n  self:debug(\"onInit\") \n  \n  self:getQuickAppVariables() -- Get Quickapp Variables or create them\n  self:createVariables() -- Create Variables\n\n  http = net.HTTPClient({timeout=httpTimeout*1000})\n\n  if tonumber(debugLevel) >= 4 then \n    self:simData() -- Go in simulation\n  else \n    self:getData() -- Get data from API\n  end\nend\n\n--EOF"}]}